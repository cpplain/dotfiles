#!/usr/bin/env bash

set -euo pipefail

set_env() {
    while true; do
        read -p "Config repo directory: " CONFIG_REPO
        CONFIG_REPO="${CONFIG_REPO/#\~/$HOME}"

        echo "Config repo: $CONFIG_REPO"
        read -p "Continue? [Y/n]: " YN
        case $YN in
        n)
            continue
            ;;
        *)
            break
            ;;
        esac
    done

    echo "CONFIG_REPO=$CONFIG_REPO" >~/.env
    source ~/.env
}

create_links() {
    echo "Creating links"
    pub_home=$CONFIG_REPO/home
    prv_home=$CONFIG_REPO/private/home

    dirs=$(find $pub_home -type d -depth 1)
    for source in $dirs; do
        target=$(echo $source | sed "s|$pub_home|$HOME|")

        if [ -d $target ] && [ ! -L $target ]; then
            echo "$target: Directory exists"
            exit 1
        fi

        ln -snf $source $target
        echo $target
    done

    files=$(find $pub_home -type f -depth 1)
    for source in $files; do
        target=$(echo $source | sed "s|$pub_home|$HOME|")

        ln -sf $source $target
        echo $target
    done

    files=$(find $prv_home -type f)
    for source in $files; do
        target=$(echo $source | sed "s|$prv_home|$HOME|")

        ln -sf $source $target
        echo $target
    done
}

prune_links() {
    echo "Pruning broken links"
    find -L ~ -path ~/Library -prune -o -lname $CONFIG_REPO/\* -exec rm -f {} \; -print 2>/dev/null
}

remove_links() {
    echo "Removing all links"
    find ~ -path ~/Library -prune -o -lname $CONFIG_REPO/\* -exec rm -f {} \; -print 2>/dev/null
}

install_brew() {
    echo "Installing brew"
    brew=/opt/homebrew/bin/brew
    test -x $brew && echo "Brew already installed: $brew" && return
    curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash
}

brew_bundle() {
    echo "Running brew bundle"
    brew update
    brew bundle --global --verbose --force
}

bundle_cleanup() {
    echo "Running brew bundle cleanup"
    brew update
    brew bundle cleanup --global --verbose --force
}

clone_repo() {
    echo "Cloning dotfiles repo"
    test -d $CONFIG_REPO/.git && echo "Repo already exists: $CONFIG_REPO" && return
    git clone --recurse-submodules https://github.com/cpplain/dotfiles.git $CONFIG_REPO
}

bootstrap() {
    set_env
    install_brew
    clone_repo
    create_links
    brew_bundle
}

usage() {
    cat <<EOS
Usage: cfgmanager [options]
    --brew-bundle     Update brew, install packages, upgrade packages
    --bundle-cleanup  Uninstall all dependencies not present Brewfile
    --create-links    Create links to cofiguration files
    --prune-links     Prune broken links
    --remove-links    Remove all links to configuration files
    --bootstrap       Bootstrap configuration (default)
    -h, --help        Display this message
EOS
}

case $1 in
--brew-bundle)
    brew_bundle
    ;;
--bundle-cleanup)
    bundle_cleanup
    ;;
--create-links)
    create_links
    ;;
--prune-links)
    prune_links
    ;;
--remove-links)
    remove_links
    ;;
--set-env)
    set_env
    ;;
-h | --help)
    usage
    ;;
* | --bootstrap)
    bootstrap
    ;;
esac
