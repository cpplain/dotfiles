#!/usr/bin/env bash

set -euo pipefail

set_env() {
    while true; do
        echo "Confgure environement for:"
        echo "[1] personal (default)"
        echo "[2] work"
        read -p "Enter selection: " ENV
        case $ENV in
        2)
            ENV=work
            ;;
        *)
            ENV=personal
            ;;
        esac

        read -p "Target repo directory: " REPO_DIR
        REPO_DIR="${REPO_DIR/#\~/$HOME}"

        echo "Configuration environment: $ENV"
        echo "Dotfiles repo: $REPO_DIR"
        read -p "Continue? [Y/n]: " YN
        case $YN in
        n)
            continue
            ;;
        *)
            break
            ;;
        esac
    done

    echo "CONFIG_ENV=$ENV" >~/.env
    echo "DOTFILES_REPO_DIR=$REPO_DIR" >>~/.env
    source ~/.env
}

create_links() {
    echo "Creating links"
    pub_home=$DOTFILES_REPO_DIR/home
    prv_home=$DOTFILES_REPO_DIR/private/home

    dirs=$(find $pub_home -type d -depth 1)
    for source in $dirs; do
        target=$(echo $source | sed "s|$pub_home|$HOME|")

        if [ -d $target ]; then
            if [ -L $target ]; then
                rm -f $target
            else
                echo "$target: Directory exists"
                exit 1
            fi
        fi

        ln -s $source $target
        echo $target
    done

    files=$(find $pub_home -type f -depth 1)
    for source in $files; do
        target=$(echo $source | sed "s|$pub_home|$HOME|")

        if [ -L $target ]; then
            rm -f $target
        fi

        ln -s $source $target
        echo $target
    done

    files=$(find $prv_home -type f)
    for source in $files; do
        target=$(echo $source | sed "s|$prv_home|$HOME|")

        if [ -L $target ]; then
            rm -f $target
        fi

        ln -s $source $target
        echo $target
    done
}

prune_links() {
    echo "Pruning broken links"
    find -L ~ -path ~/Library -prune -o -lname $DOTFILES_REPO_DIR/\* -exec rm -f {} \; -print 2>/dev/null
}

remove_links() {
    echo "Removing all links"
    find ~ -path ~/Library -prune -o -lname $DOTFILES_REPO_DIR/\* -exec rm -f {} \; -print 2>/dev/null
}

install_brew() {
    echo "Installing brew"
    case $(uname -sm) in
    "Darwin arm64")
        brew=/opt/homebrew/bin/brew
        ;;
    *)
        brew=/usr/local/bin/brew
        ;;
    esac
    test -x $brew && echo "Brew already installed: $brew" && return
    curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash
}

clone_repo() {
    echo "Cloning dotfiles repo"
    test -d $DOTFILES_REPO_DIR/.git && echo "Repo already exists: $DOTFILES_REPO_DIR" && return
    git clone --recurse-submodules https://github.com/cpplain/dotfiles.git $DOTFILES_REPO_DIR
}

bootstrap() {
    set_env
    install_brew
    clone_repo
    create_links
    source $DOTFILES_REPO_DIR/scripts/brew.sh
    brew_bundle
}

usage() {
    cat <<EOS
Usage: cfgmanager.sh [options]
    --brew-bundle     Update brew, install packages, upgrade packages
    --bundle-cleanup  Uninstall all dependencies not present Brewfile
    --create-links    Create links to cofiguration files
    --prune-links     Prune broken links
    --remove-links    Remove all links to configuration files
    --bootstrap       Bootstrap configuration (default)
    -h, --help        Display this message
EOS
}

case $1 in
--brew-bundle)
    source $DOTFILES_REPO_DIR/scripts/brew.sh
    brew_bundle
    ;;
--bundle-cleanup)
    source $DOTFILES_REPO_DIR/scripts/brew.sh
    bundle_cleanup
    ;;
--create-links)
    create_links
    ;;
--prune-links)
    prune_links
    ;;
--remove-links)
    remove_links
    ;;
-h | --help)
    usage
    ;;
* | --bootstrap)
    bootstrap
    ;;
esac
